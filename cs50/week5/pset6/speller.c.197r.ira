
;; Function main (main, funcdef_no=0, decl_uid=1786, cgraph_uid=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 41 n_edges 60 count 41 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r181: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a10 (r181,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r180: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a11 (r180,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r179: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a12 (r179,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r178: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a13 (r178,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a17 (r174,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r170,l0) best Q_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r168,l0) best AREG, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a26 (r166,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r162,l0) best AREG, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r156,l0) best AREG, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a65 (r145,l0) best AREG, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a83 (r143,l0) best AREG, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a98 (r137,l0) best AREG, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a101 (r134,l0) best AREG, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a106 (r130,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a111 (r126,l0) best Q_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a113 (r124,l0) best AREG, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a118 (r120,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r119: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a119 (r119,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r118: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a120 (r118,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r117: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a121 (r117,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best AREG, allocno GENERAL_REGS
    r114: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a2 (r114,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r113: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a3 (r113,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r112: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a4 (r112,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r111: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a5 (r111,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r110: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a6 (r110,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r109: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a7 (r109,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r108: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a8 (r108,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r107: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a9 (r107,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r106: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r106,l0) best Q_REGS, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r105,l0) best AREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r97,l0) best AREG, allocno GENERAL_REGS
    r96: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a86 (r96,l0) best Q_REGS, allocno GENERAL_REGS
    r95: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a40 (r95,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r94: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a41 (r94,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r93: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a43 (r93,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r92: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a42 (r92,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r91: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r91,l0) best Q_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r89,l0) best Q_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a64 (r79,l0) best AREG, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r71,l0) best AREG, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a97 (r63,l0) best AREG, allocno GENERAL_REGS
    r62: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a110 (r62,l0) best Q_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:458745 FLOAT_INT_SSE_REGS:458745 ALL_REGS:458745 MEM:27
  a2(r114,l0) costs: AD_REGS:64 CLOBBERED_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 LEGACY_REGS:64 GENERAL_REGS:64 INT_SSE_REGS:64 FP_TOP_REG:2 FP_TOP_SSE_REGS:2 FP_SECOND_REG:2 FP_SECOND_SSE_REGS:2 FLOAT_REGS:2 FLOAT_SSE_REGS:2 FLOAT_INT_REGS:64 FLOAT_INT_SSE_REGS:64 ALL_REGS:64 MEM:20
  a3(r113,l0) costs: CLOBBERED_REGS:72 Q_REGS:72 NON_Q_REGS:72 INDEX_REGS:72 LEGACY_REGS:72 GENERAL_REGS:72 INT_SSE_REGS:72 FP_TOP_REG:2 FP_TOP_SSE_REGS:2 FP_SECOND_REG:2 FP_SECOND_SSE_REGS:2 FLOAT_REGS:2 FLOAT_SSE_REGS:2 FLOAT_INT_REGS:72 FLOAT_INT_SSE_REGS:72 ALL_REGS:72 MEM:22
  a4(r112,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a5(r111,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a6(r110,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a7(r109,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a8(r108,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a9(r107,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a10(r181,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a11(r180,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a12(r179,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a13(r178,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a14(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a15(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a16(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a17(r174,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:-1 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a18(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a19(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a21(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:13 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a22(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:2 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a23(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a24(r168,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:4 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a25(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a26(r166,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:-1 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a27(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a28(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a29(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a30(r162,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a31(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a32(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a33(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a35(r105,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a36(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a37(r156,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a38(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a39(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a40(r95,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a41(r94,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a42(r92,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a43(r93,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:-1 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:17
  a44(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a45(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a46(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a47(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 MEM:8
  a48(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:13 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a51(r87,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a53(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a54(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a55(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a56(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a58(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a60(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a62(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a64(r79,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a65(r145,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a66(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a67(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a68(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a69(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a70(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a71(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a72(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a73(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a74(r71,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a75(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a76(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a77(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a78(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a79(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a80(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a81(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a82(r97,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a83(r143,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a84(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a85(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a86(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:4 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a87(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a88(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a89(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:7
  a90(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a91(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a92(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a93(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a94(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a95(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a96(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a97(r63,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a98(r137,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a99(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a100(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a101(r134,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a102(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a103(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a104(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a105(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a106(r130,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:-1 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a107(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a108(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a109(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a110(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:13 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a111(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:2 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a112(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a113(r124,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:2 DIREG:2 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:4 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a114(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a115(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a116(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a117(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a118(r120,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a119(r119,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a120(r118,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a121(r117,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:18
  a122(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 410(l0): point = 0
   Insn 407(l0): point = 3
   Insn 406(l0): point = 6
   Insn 405(l0): point = 8
   Insn 402(l0): point = 10
   Insn 398(l0): point = 12
   Insn 393(l0): point = 15
   Insn 392(l0): point = 17
   Insn 391(l0): point = 19
   Insn 390(l0): point = 21
   Insn 389(l0): point = 23
   Insn 388(l0): point = 25
   Insn 387(l0): point = 27
   Insn 386(l0): point = 29
   Insn 385(l0): point = 31
   Insn 384(l0): point = 33
   Insn 383(l0): point = 35
   Insn 382(l0): point = 37
   Insn 381(l0): point = 39
   Insn 380(l0): point = 41
   Insn 379(l0): point = 43
   Insn 378(l0): point = 45
   Insn 377(l0): point = 47
   Insn 376(l0): point = 49
   Insn 375(l0): point = 51
   Insn 374(l0): point = 53
   Insn 373(l0): point = 55
   Insn 372(l0): point = 57
   Insn 371(l0): point = 59
   Insn 370(l0): point = 61
   Insn 369(l0): point = 63
   Insn 368(l0): point = 65
   Insn 367(l0): point = 67
   Insn 366(l0): point = 69
   Insn 365(l0): point = 71
   Insn 364(l0): point = 73
   Insn 363(l0): point = 75
   Insn 362(l0): point = 77
   Insn 361(l0): point = 79
   Insn 360(l0): point = 81
   Insn 359(l0): point = 83
   Insn 358(l0): point = 85
   Insn 357(l0): point = 87
   Insn 356(l0): point = 89
   Insn 355(l0): point = 91
   Insn 354(l0): point = 93
   Insn 353(l0): point = 95
   Insn 352(l0): point = 97
   Insn 351(l0): point = 99
   Insn 350(l0): point = 101
   Insn 349(l0): point = 103
   Insn 348(l0): point = 105
   Insn 347(l0): point = 107
   Insn 433(l0): point = 110
   Insn 342(l0): point = 112
   Insn 341(l0): point = 114
   Insn 340(l0): point = 116
   Insn 339(l0): point = 118
   Insn 338(l0): point = 120
   Insn 336(l0): point = 123
   Insn 335(l0): point = 125
   Insn 334(l0): point = 127
   Insn 333(l0): point = 129
   Insn 332(l0): point = 131
   Insn 331(l0): point = 133
   Insn 330(l0): point = 135
   Insn 329(l0): point = 137
   Insn 328(l0): point = 139
   Insn 327(l0): point = 141
   Insn 326(l0): point = 143
   Insn 325(l0): point = 145
   Insn 324(l0): point = 147
   Insn 323(l0): point = 149
   Insn 322(l0): point = 151
   Insn 321(l0): point = 153
   Insn 320(l0): point = 155
   Insn 319(l0): point = 157
   Insn 318(l0): point = 159
   Insn 317(l0): point = 161
   Insn 316(l0): point = 163
   Insn 315(l0): point = 165
   Insn 314(l0): point = 167
   Insn 313(l0): point = 169
   Insn 312(l0): point = 171
   Insn 311(l0): point = 173
   Insn 310(l0): point = 175
   Insn 309(l0): point = 177
   Insn 308(l0): point = 179
   Insn 307(l0): point = 181
   Insn 306(l0): point = 183
   Insn 305(l0): point = 185
   Insn 304(l0): point = 187
   Insn 303(l0): point = 189
   Insn 302(l0): point = 191
   Insn 301(l0): point = 193
   Insn 431(l0): point = 196
   Insn 296(l0): point = 198
   Insn 295(l0): point = 200
   Insn 294(l0): point = 202
   Insn 293(l0): point = 204
   Insn 292(l0): point = 206
   Insn 291(l0): point = 208
   Insn 290(l0): point = 210
   Insn 289(l0): point = 212
   Insn 288(l0): point = 214
   Insn 286(l0): point = 217
   Insn 285(l0): point = 219
   Insn 284(l0): point = 221
   Insn 283(l0): point = 223
   Insn 282(l0): point = 225
   Insn 281(l0): point = 227
   Insn 279(l0): point = 230
   Insn 278(l0): point = 232
   Insn 274(l0): point = 235
   Insn 273(l0): point = 237
   Insn 272(l0): point = 239
   Insn 271(l0): point = 241
   Insn 270(l0): point = 243
   Insn 267(l0): point = 246
   Insn 264(l0): point = 249
   Insn 263(l0): point = 251
   Insn 262(l0): point = 253
   Insn 261(l0): point = 255
   Insn 259(l0): point = 258
   Insn 258(l0): point = 260
   Insn 435(l0): point = 262
   Insn 256(l0): point = 264
   Insn 255(l0): point = 266
   Insn 254(l0): point = 268
   Insn 253(l0): point = 270
   Insn 252(l0): point = 272
   Insn 251(l0): point = 274
   Insn 250(l0): point = 276
   Insn 249(l0): point = 278
   Insn 248(l0): point = 280
   Insn 247(l0): point = 282
   Insn 246(l0): point = 284
   Insn 245(l0): point = 286
   Insn 244(l0): point = 288
   Insn 243(l0): point = 290
   Insn 242(l0): point = 292
   Insn 241(l0): point = 294
   Insn 240(l0): point = 296
   Insn 239(l0): point = 298
   Insn 238(l0): point = 300
   Insn 237(l0): point = 302
   Insn 236(l0): point = 304
   Insn 235(l0): point = 306
   Insn 234(l0): point = 308
   Insn 233(l0): point = 310
   Insn 232(l0): point = 312
   Insn 231(l0): point = 314
   Insn 230(l0): point = 316
   Insn 229(l0): point = 318
   Insn 228(l0): point = 320
   Insn 227(l0): point = 322
   Insn 226(l0): point = 324
   Insn 225(l0): point = 326
   Insn 224(l0): point = 328
   Insn 222(l0): point = 331
   Insn 221(l0): point = 333
   Insn 429(l0): point = 336
   Insn 216(l0): point = 338
   Insn 213(l0): point = 341
   Insn 212(l0): point = 343
   Insn 210(l0): point = 345
   Insn 209(l0): point = 347
   Insn 208(l0): point = 349
   Insn 207(l0): point = 351
   Insn 206(l0): point = 353
   Insn 205(l0): point = 355
   Insn 204(l0): point = 357
   Insn 203(l0): point = 359
   Insn 202(l0): point = 361
   Insn 200(l0): point = 364
   Insn 199(l0): point = 366
   Insn 198(l0): point = 368
   Insn 197(l0): point = 370
   Insn 196(l0): point = 372
   Insn 195(l0): point = 374
   Insn 194(l0): point = 376
   Insn 191(l0): point = 379
   Insn 190(l0): point = 381
   Insn 189(l0): point = 383
   Insn 188(l0): point = 385
   Insn 187(l0): point = 387
   Insn 186(l0): point = 389
   Insn 185(l0): point = 391
   Insn 184(l0): point = 393
   Insn 183(l0): point = 395
   Insn 182(l0): point = 397
   Insn 181(l0): point = 399
   Insn 427(l0): point = 402
   Insn 174(l0): point = 404
   Insn 171(l0): point = 407
   Insn 170(l0): point = 409
   Insn 168(l0): point = 411
   Insn 167(l0): point = 413
   Insn 166(l0): point = 415
   Insn 165(l0): point = 417
   Insn 164(l0): point = 419
   Insn 163(l0): point = 421
   Insn 162(l0): point = 423
   Insn 161(l0): point = 425
   Insn 160(l0): point = 427
   Insn 158(l0): point = 430
   Insn 157(l0): point = 432
   Insn 156(l0): point = 434
   Insn 155(l0): point = 436
   Insn 154(l0): point = 438
   Insn 153(l0): point = 440
   Insn 152(l0): point = 442
   Insn 149(l0): point = 445
   Insn 148(l0): point = 447
   Insn 147(l0): point = 449
   Insn 146(l0): point = 451
   Insn 145(l0): point = 453
   Insn 144(l0): point = 455
   Insn 143(l0): point = 457
   Insn 142(l0): point = 459
   Insn 141(l0): point = 461
   Insn 138(l0): point = 464
   Insn 137(l0): point = 466
   Insn 135(l0): point = 469
   Insn 134(l0): point = 471
   Insn 132(l0): point = 474
   Insn 131(l0): point = 476
   Insn 130(l0): point = 478
   Insn 129(l0): point = 480
   Insn 128(l0): point = 482
   Insn 127(l0): point = 484
   Insn 126(l0): point = 486
   Insn 125(l0): point = 488
   Insn 124(l0): point = 490
   Insn 123(l0): point = 492
   Insn 122(l0): point = 494
   Insn 425(l0): point = 497
   Insn 118(l0): point = 499
   Insn 117(l0): point = 501
   Insn 116(l0): point = 503
   Insn 115(l0): point = 505
   Insn 114(l0): point = 507
   Insn 113(l0): point = 509
   Insn 112(l0): point = 511
   Insn 111(l0): point = 513
   Insn 110(l0): point = 515
   Insn 109(l0): point = 517
   Insn 423(l0): point = 520
   Insn 104(l0): point = 522
   Insn 103(l0): point = 524
   Insn 102(l0): point = 526
   Insn 101(l0): point = 528
   Insn 100(l0): point = 530
   Insn 99(l0): point = 532
   Insn 97(l0): point = 535
   Insn 96(l0): point = 537
   Insn 95(l0): point = 539
   Insn 94(l0): point = 541
   Insn 93(l0): point = 543
   Insn 92(l0): point = 545
   Insn 91(l0): point = 547
   Insn 90(l0): point = 549
   Insn 89(l0): point = 551
   Insn 86(l0): point = 554
   Insn 85(l0): point = 556
   Insn 421(l0): point = 559
   Insn 80(l0): point = 561
   Insn 79(l0): point = 563
   Insn 77(l0): point = 566
   Insn 76(l0): point = 568
   Insn 75(l0): point = 570
   Insn 74(l0): point = 572
   Insn 73(l0): point = 574
   Insn 72(l0): point = 576
   Insn 71(l0): point = 578
   Insn 70(l0): point = 580
   Insn 69(l0): point = 582
   Insn 419(l0): point = 585
   Insn 64(l0): point = 587
   Insn 63(l0): point = 589
   Insn 62(l0): point = 591
   Insn 61(l0): point = 593
   Insn 60(l0): point = 595
   Insn 58(l0): point = 598
   Insn 57(l0): point = 600
   Insn 56(l0): point = 602
   Insn 55(l0): point = 604
   Insn 54(l0): point = 606
   Insn 53(l0): point = 608
   Insn 52(l0): point = 610
   Insn 51(l0): point = 612
   Insn 50(l0): point = 614
   Insn 49(l0): point = 616
   Insn 48(l0): point = 618
   Insn 47(l0): point = 620
   Insn 46(l0): point = 622
   Insn 45(l0): point = 624
   Insn 44(l0): point = 626
   Insn 43(l0): point = 628
   Insn 42(l0): point = 630
   Insn 41(l0): point = 632
   Insn 38(l0): point = 635
   Insn 417(l0): point = 638
   Insn 33(l0): point = 640
   Insn 32(l0): point = 642
   Insn 30(l0): point = 645
   Insn 29(l0): point = 647
   Insn 28(l0): point = 649
   Insn 27(l0): point = 651
   Insn 26(l0): point = 653
   Insn 25(l0): point = 655
   Insn 24(l0): point = 657
   Insn 23(l0): point = 659
   Insn 22(l0): point = 661
   Insn 21(l0): point = 663
   Insn 415(l0): point = 666
   Insn 16(l0): point = 668
   Insn 15(l0): point = 670
   Insn 14(l0): point = 672
   Insn 12(l0): point = 675
   Insn 11(l0): point = 677
   Insn 9(l0): point = 680
   Insn 8(l0): point = 682
   Insn 5(l0): point = 684
   Insn 3(l0): point = 686
   Insn 2(l0): point = 688
 a0(r115): [11..12]
 a1(r59): [666..668] [585..587] [520..522] [196..198] [110..112] [13..15]
 a2(r114): [22..23]
 a3(r113): [24..25]
 a4(r112): [26..27]
 a5(r111): [26..29]
 a6(r110): [30..31]
 a7(r109): [30..33]
 a8(r108): [34..35]
 a9(r107): [34..37]
 a10(r181): [44..45]
 a11(r180): [52..53]
 a12(r179): [60..61]
 a13(r178): [68..69]
 a14(r177): [76..77]
 a15(r176): [84..85]
 a16(r175): [92..93]
 a17(r174): [96..97]
 a18(r173): [102..103]
 a19(r172): [106..107]
 a20(r171): [119..120]
 a21(r106): [126..127]
 a22(r170): [128..129]
 a23(r169): [136..137]
 a24(r168): [140..141]
 a25(r167): [150..151]
 a26(r166): [154..155]
 a27(r165): [160..161]
 a28(r164): [164..165]
 a29(r163): [172..173]
 a30(r162): [176..177]
 a31(r161): [186..187]
 a32(r160): [192..193]
 a33(r159): [207..208]
 a34(r158): [213..214]
 a35(r105): [220..221]
 a36(r157): [226..227]
 a37(r156): [236..237]
 a38(r155): [242..243]
 a39(r154): [254..255]
 a40(r95): [263..264]
 a41(r94): [265..266]
 a42(r92): [265..280]
 a43(r93): [267..268]
 a44(r153): [273..274]
 a45(r152): [277..278]
 a46(r151): [287..288]
 a47(r91): [293..294]
 a48(r90): [295..296]
 a49(r89): [297..298]
 a50(r88): [301..302]
 a51(r87): [303..304]
 a52(r150): [309..310]
 a53(r149): [317..318]
 a54(r147): [323..324]
 a55(r148): [325..326]
 a56(r146): [325..328]
 a57(r86): [344..345]
 a58(r85): [346..347]
 a59(r84): [348..349]
 a60(r83): [350..351]
 a61(r82): [352..353]
 a62(r80): [352..357]
 a63(r81): [354..355]
 a64(r79): [358..359]
 a65(r145): [369..370]
 a66(r144): [375..376]
 a67(r78): [382..383]
 a68(r77): [384..385]
 a69(r76): [386..387]
 a70(r75): [388..389]
 a71(r74): [390..391]
 a72(r72): [390..395]
 a73(r73): [392..393]
 a74(r71): [396..397]
 a75(r104): [410..411]
 a76(r103): [412..413]
 a77(r102): [414..415]
 a78(r101): [416..417]
 a79(r100): [418..419]
 a80(r98): [418..423]
 a81(r99): [420..421]
 a82(r97): [424..425]
 a83(r143): [435..436]
 a84(r142): [441..442]
 a85(r140): [452..453]
 a86(r96): [452..459]
 a87(r141): [454..455]
 a88(r139): [454..457]
 a89(r138): [460..461]
 a90(r70): [477..478]
 a91(r69): [479..480]
 a92(r68): [481..482]
 a93(r67): [483..484]
 a94(r66): [485..486]
 a95(r64): [485..490]
 a96(r65): [487..488]
 a97(r63): [491..492]
 a98(r137): [500..501]
 a99(r136): [506..507]
 a100(r135): [531..532]
 a101(r134): [540..541]
 a102(r133): [546..547]
 a103(r61): [559..561] [552..554]
 a104(r132): [555..556]
 a105(r131): [562..563]
 a106(r130): [571..572]
 a107(r129): [577..578]
 a108(r128): [581..582]
 a109(r127): [594..595]
 a110(r62): [601..602]
 a111(r126): [603..604]
 a112(r125): [611..612]
 a113(r124): [615..616]
 a114(r123): [621..622]
 a115(r122): [629..630]
 a116(r60): [638..640] [633..635]
 a117(r121): [641..642]
 a118(r120): [650..651]
 a119(r119): [654..655]
 a120(r118): [658..659]
 a121(r117): [662..663]
 a122(r116): [687..688]
Compressing live ranges: from 691 to 238 - 34%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r59): [234..235] [204..205] [182..183] [62..63] [34..35] [2..3]
 a2(r114): [4..5]
 a3(r113): [6..7]
 a4(r112): [8..9]
 a5(r111): [8..9]
 a6(r110): [10..11]
 a7(r109): [10..11]
 a8(r108): [12..13]
 a9(r107): [12..13]
 a10(r181): [14..15]
 a11(r180): [16..17]
 a12(r179): [18..19]
 a13(r178): [20..21]
 a14(r177): [22..23]
 a15(r176): [24..25]
 a16(r175): [26..27]
 a17(r174): [28..29]
 a18(r173): [30..31]
 a19(r172): [32..33]
 a20(r171): [36..37]
 a21(r106): [38..39]
 a22(r170): [40..41]
 a23(r169): [42..43]
 a24(r168): [44..45]
 a25(r167): [46..47]
 a26(r166): [48..49]
 a27(r165): [50..51]
 a28(r164): [52..53]
 a29(r163): [54..55]
 a30(r162): [56..57]
 a31(r161): [58..59]
 a32(r160): [60..61]
 a33(r159): [64..65]
 a34(r158): [66..67]
 a35(r105): [68..69]
 a36(r157): [70..71]
 a37(r156): [72..73]
 a38(r155): [74..75]
 a39(r154): [76..77]
 a40(r95): [78..79]
 a41(r94): [80..81]
 a42(r92): [80..87]
 a43(r93): [82..83]
 a44(r153): [84..85]
 a45(r152): [86..87]
 a46(r151): [88..89]
 a47(r91): [90..91]
 a48(r90): [92..93]
 a49(r89): [94..95]
 a50(r88): [96..97]
 a51(r87): [98..99]
 a52(r150): [100..101]
 a53(r149): [102..103]
 a54(r147): [104..105]
 a55(r148): [106..107]
 a56(r146): [106..107]
 a57(r86): [108..109]
 a58(r85): [110..111]
 a59(r84): [112..113]
 a60(r83): [114..115]
 a61(r82): [116..117]
 a62(r80): [116..119]
 a63(r81): [118..119]
 a64(r79): [120..121]
 a65(r145): [122..123]
 a66(r144): [124..125]
 a67(r78): [126..127]
 a68(r77): [128..129]
 a69(r76): [130..131]
 a70(r75): [132..133]
 a71(r74): [134..135]
 a72(r72): [134..137]
 a73(r73): [136..137]
 a74(r71): [138..139]
 a75(r104): [140..141]
 a76(r103): [142..143]
 a77(r102): [144..145]
 a78(r101): [146..147]
 a79(r100): [148..149]
 a80(r98): [148..151]
 a81(r99): [150..151]
 a82(r97): [152..153]
 a83(r143): [154..155]
 a84(r142): [156..157]
 a85(r140): [158..159]
 a86(r96): [158..161]
 a87(r141): [160..161]
 a88(r139): [160..161]
 a89(r138): [162..163]
 a90(r70): [164..165]
 a91(r69): [166..167]
 a92(r68): [168..169]
 a93(r67): [170..171]
 a94(r66): [172..173]
 a95(r64): [172..175]
 a96(r65): [174..175]
 a97(r63): [176..177]
 a98(r137): [178..179]
 a99(r136): [180..181]
 a100(r135): [184..185]
 a101(r134): [186..187]
 a102(r133): [188..189]
 a103(r61): [194..195] [190..191]
 a104(r132): [192..193]
 a105(r131): [196..197]
 a106(r130): [198..199]
 a107(r129): [200..201]
 a108(r128): [202..203]
 a109(r127): [206..207]
 a110(r62): [208..209]
 a111(r126): [210..211]
 a112(r125): [212..213]
 a113(r124): [214..215]
 a114(r123): [216..217]
 a115(r122): [218..219]
 a116(r60): [222..223] [220..221]
 a117(r121): [224..225]
 a118(r120): [226..227]
 a119(r119): [228..229]
 a120(r118): [230..231]
 a121(r117): [232..233]
 a122(r116): [236..237]
  regions=1, blocks=41, points=238
    allocnos=123 (big 0), copies=0, conflicts=0, ranges=130
Disposition:
    1:r59  l0     0  116:r60  l0     0  103:r61  l0     0  110:r62  l0     0
   97:r63  l0     0   95:r64  l0     0   96:r65  l0     1   94:r66  l0     1
   93:r67  l0     0   92:r68  l0     0   91:r69  l0     0   90:r70  l0     0
   74:r71  l0     0   72:r72  l0     0   73:r73  l0     1   71:r74  l0     1
   70:r75  l0     0   69:r76  l0     0   68:r77  l0     0   67:r78  l0     0
   64:r79  l0     0   62:r80  l0     0   63:r81  l0     1   61:r82  l0     1
   60:r83  l0     0   59:r84  l0     0   58:r85  l0     0   57:r86  l0     0
   51:r87  l0     0   50:r88  l0     0   49:r89  l0     0   48:r90  l0     0
   47:r91  l0     0   42:r92  l0   mem   43:r93  l0     8   41:r94  l0     8
   40:r95  l0     8   86:r96  l0     0   82:r97  l0     0   80:r98  l0     0
   81:r99  l0     1   79:r100 l0     1   78:r101 l0     0   77:r102 l0     0
   76:r103 l0     0   75:r104 l0     0   35:r105 l0     0   21:r106 l0     0
    9:r107 l0     9    8:r108 l0     8    7:r109 l0     9    6:r110 l0     8
    5:r111 l0     9    4:r112 l0     8    3:r113 l0     8    2:r114 l0     8
    0:r115 l0     0  122:r116 l0     0  121:r117 l0     8  120:r118 l0     8
  119:r119 l0     8  118:r120 l0     8  117:r121 l0     0  115:r122 l0     0
  114:r123 l0     0  113:r124 l0     0  112:r125 l0     0  111:r126 l0     0
  109:r127 l0     0  108:r128 l0     0  107:r129 l0     0  106:r130 l0     8
  105:r131 l0     0  104:r132 l0     0  102:r133 l0     0  101:r134 l0     0
  100:r135 l0     0   99:r136 l0     0   98:r137 l0     0   89:r138 l0     0
   88:r139 l0     2   85:r140 l0     1   87:r141 l0     1   84:r142 l0     0
   83:r143 l0     0   66:r144 l0     0   65:r145 l0     0   56:r146 l0     1
   54:r147 l0     0   55:r148 l0     0   53:r149 l0     0   52:r150 l0     0
   46:r151 l0     0   45:r152 l0     0   44:r153 l0     0   39:r154 l0     0
   38:r155 l0     0   37:r156 l0     0   36:r157 l0     0   34:r158 l0     0
   33:r159 l0     0   32:r160 l0     0   31:r161 l0     0   30:r162 l0     0
   29:r163 l0     0   28:r164 l0     0   27:r165 l0     0   26:r166 l0     8
   25:r167 l0     0   24:r168 l0     0   23:r169 l0     0   22:r170 l0     0
   20:r171 l0     0   19:r172 l0     0   18:r173 l0     0   17:r174 l0     8
   16:r175 l0     0   15:r176 l0     0   14:r177 l0     0   13:r178 l0     8
   12:r179 l0     8   11:r180 l0     8   10:r181 l0     8
+++Costs: overall 5, reg -15, mem 20, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={48d,16u} r1={47d} r2={47d} r6={1d,40u} r7={1d,210u} r8={46d,4u} r9={46d} r10={46d} r11={46d} r12={46d} r13={46d} r14={46d} r15={46d} r16={1d,44u} r17={112d,22u} r18={46d} r19={46d} r20={1d,143u,20e} r21={46d} r22={46d} r23={46d} r24={46d} r25={46d} r26={46d} r27={46d} r28={46d} r29={46d} r30={46d} r31={46d} r32={46d} r33={46d} r34={46d} r35={46d} r36={46d} r37={46d} r38={46d} r39={46d} r40={46d} r41={46d} r42={46d} r43={46d} r44={46d} r45={46d} r46={46d} r47={46d} r48={46d} r49={46d} r50={46d} r51={46d} r52={46d} r59={6d,1u} r60={2d,1u} r61={2d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} 
;;    total ref usage 2942{2320d,602u,20e} in 326{280 regular + 46 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)


;; Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  ENTRY (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116

(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) speller.c:27 64 {*movsi_internal}
     (nil))

(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -276 [0xfffffffffffffeec])) [0 argv+0 S4 A32])
        (reg/f:SI 116)) speller.c:27 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))

(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:SI (plus:SI (reg/f:SI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 D.1941+0 S4 A32])
                (unspec:SI [
                        (const_int 20 [0x14])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:SI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) speller.c:27 938 {stack_tls_protect_set_si}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (reg/f:SI 16 argp) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) speller.c:29 6 {*cmpsi_1}
     (nil))

(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) speller.c:29 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)

;; Successors:  3 (fallthru) 5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  2 (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (reg/f:SI 16 argp) [0 argc+0 S4 A32])
            (const_int 3 [0x3]))) speller.c:29 6 {*cmpsi_1}
     (nil))

(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) speller.c:29 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)

;; Successors:  4 (fallthru) 5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  3 (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59

(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0xb6a30180 *.LC0>)) speller.c:31 64 {*movsi_internal}
     (nil))

(call_insn 15 14 16 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb6990400 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) speller.c:31 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 16 15 415 4 (set (reg:SI 59 [ D.1851 ])
        (const_int 1 [0x1])) speller.c:32 64 {*movsi_internal}
     (nil))

(jump_insn 415 16 416 4 (set (pc)
        (label_ref 396)) 611 {jump}
     (nil)
 -> 396)

;; Successors:  38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


(barrier 416 415 19)


;; Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  2 3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 119 120

(code_label 19 416 20 5 2 "" [2 uses])

(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 5 (set (reg:DF 117)
        (mem/u/c:DF (symbol_ref/u:SI ("*.LC1") [flags 0x2]) [0 S8 A64])) speller.c:39 109 {*movdf_internal}
     (nil))

(insn 22 21 23 5 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 ti_load+0 S8 A64])
        (reg:DF 117)) speller.c:39 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 117)
        (nil)))

(insn 23 22 24 5 (set (reg:DF 118)
        (mem/u/c:DF (symbol_ref/u:SI ("*.LC1") [flags 0x2]) [0 S8 A64])) speller.c:39 109 {*movdf_internal}
     (nil))

(insn 24 23 25 5 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 ti_check+0 S8 A64])
        (reg:DF 118)) speller.c:39 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 118)
        (nil)))

(insn 25 24 26 5 (set (reg:DF 119)
        (mem/u/c:DF (symbol_ref/u:SI ("*.LC1") [flags 0x2]) [0 S8 A64])) speller.c:39 109 {*movdf_internal}
     (nil))

(insn 26 25 27 5 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 ti_size+0 S8 A64])
        (reg:DF 119)) speller.c:39 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 119)
        (nil)))

(insn 27 26 28 5 (set (reg:DF 120)
        (mem/u/c:DF (symbol_ref/u:SI ("*.LC1") [flags 0x2]) [0 S8 A64])) speller.c:39 109 {*movdf_internal}
     (nil))

(insn 28 27 29 5 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 ti_unload+0 S8 A64])
        (reg:DF 120)) speller.c:39 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 120)
        (nil)))

(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (reg/f:SI 16 argp) [0 argc+0 S4 A32])
            (const_int 3 [0x3]))) speller.c:42 6 {*cmpsi_1}
     (nil))

(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) speller.c:42 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 36)

;; Successors:  6 (fallthru) 7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  5 (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 60 121

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 6 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -276 [0xfffffffffffffeec])) [0 argv+0 S4 A32])) speller.c:42 64 {*movsi_internal}
     (nil))

(insn 33 32 417 6 (set (reg/f:SI 60 [ iftmp.0 ])
        (mem/f:SI (plus:SI (reg/f:SI 121)
                (const_int 4 [0x4])) [0 MEM[(char * *)argv_21(D) + 4B]+0 S4 A32])) speller.c:42 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 121)
        (nil)))

(jump_insn 417 33 418 6 (set (pc)
        (label_ref 39)) 611 {jump}
     (nil)
 -> 39)

;; Successors:  8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60


(barrier 418 417 36)


;; Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 60

(code_label 36 418 37 7 4 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 7 (set (reg/f:SI 60 [ iftmp.0 ])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0xb6a301e0 *.LC2>)) speller.c:42 64 {*movsi_internal}
     (nil))

;; Successors:  8 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60



;; Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  7 (fallthru) 6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 62 122 123 124 125 126

(code_label 39 38 40 8 5 "" [1 uses])

(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 dictionary+0 S4 A32])
        (reg/f:SI 60 [ iftmp.0 ])) speller.c:42 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 60 [ iftmp.0 ])
        (nil)))

(insn 42 41 43 8 (parallel [
            (set (reg:SI 122)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:45 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 43 42 44 8 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 122)) speller.c:45 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(insn 44 43 45 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:45 64 {*movsi_internal}
     (nil))

(call_insn 45 44 46 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:45 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 46 45 47 8 (set (reg/f:SI 123)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 dictionary+0 S4 A32])) speller.c:46 64 {*movsi_internal}
     (nil))

(insn 47 46 48 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 123)) speller.c:46 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 123)
        (nil)))

(call_insn 48 47 49 8 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("load") [flags 0x41]  <function_decl 0xb6a0e680 load>) [0 load S1 A8])
            (const_int 4 [0x4]))) speller.c:46 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 49 48 50 8 (set (reg:QI 124)
        (reg:QI 0 ax)) speller.c:46 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))

(insn 50 49 51 8 (set (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -267 [0xfffffffffffffef5])) [0 loaded+0 S1 A8])
        (reg:QI 124)) speller.c:46 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 124)
        (nil)))

(insn 51 50 52 8 (parallel [
            (set (reg:SI 125)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:47 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 52 51 53 8 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 125)) speller.c:47 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 53 52 54 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:47 64 {*movsi_internal}
     (nil))

(call_insn 54 53 55 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:47 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 55 54 56 8 (set (reg:QI 126)
        (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -267 [0xfffffffffffffef5])) [0 loaded+0 S1 A8])) speller.c:50 66 {*movqi_internal}
     (nil))

(insn 56 55 57 8 (parallel [
            (set (reg:QI 62 [ D.1856 ])
                (xor:QI (reg:QI 126)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:50 401 {*xorqi_1}
     (expr_list:REG_DEAD (reg:QI 126)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                            (const_int -267 [0xfffffffffffffef5])) [0 loaded+0 S1 A8])
                    (const_int 1 [0x1]))
                (nil)))))

(insn 57 56 58 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 62 [ D.1856 ])
            (const_int 0 [0]))) speller.c:50 0 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 62 [ D.1856 ])
        (nil)))

(jump_insn 58 57 59 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) speller.c:50 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 67)

;; Successors:  9 (fallthru) 10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  8 (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 127

(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 9 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 dictionary+0 S4 A32])) speller.c:52 64 {*movsi_internal}
     (nil))

(insn 61 60 62 9 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 127)) speller.c:52 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))

(insn 62 61 63 9 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0xb6a30240 *.LC3>)) speller.c:52 64 {*movsi_internal}
     (nil))

(call_insn 63 62 64 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:52 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 64 63 419 9 (set (reg:SI 59 [ D.1851 ])
        (const_int 2 [0x2])) speller.c:53 64 {*movsi_internal}
     (nil))

(jump_insn 419 64 420 9 (set (pc)
        (label_ref 396)) 611 {jump}
     (nil)
 -> 396)

;; Successors:  38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


(barrier 420 419 67)


;; Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 128 129 130

(code_label 67 420 68 10 6 "" [1 uses])

(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 69 68 70 10 (parallel [
            (set (reg:SI 128)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:57 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 70 69 71 10 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 128)) speller.c:57 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 71 70 72 10 (parallel [
            (set (reg:SI 129)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:57 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 72 71 73 10 (set (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 129)) speller.c:57 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 129)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(call_insn 73 72 74 10 (set (reg:DF 8 st)
        (call (mem:QI (symbol_ref:SI ("calculate") [flags 0x3]  <function_decl 0xb6a0e800 calculate>) [0 calculate S1 A8])
            (const_int 8 [0x8]))) speller.c:57 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 74 73 75 10 (set (reg:DF 130)
        (reg:DF 8 st)) speller.c:57 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 8 st)
        (nil)))

(insn 75 74 76 10 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 ti_load+0 S8 A64])
        (reg:DF 130)) speller.c:57 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 130)
        (nil)))

(insn 76 75 77 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (reg/f:SI 16 argp) [0 argc+0 S4 A32])
            (const_int 3 [0x3]))) speller.c:60 6 {*cmpsi_1}
     (nil))

(jump_insn 77 76 78 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) speller.c:60 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 83)

;; Successors:  11 (fallthru) 12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  10 (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 61 131

(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 79 78 80 11 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -276 [0xfffffffffffffeec])) [0 argv+0 S4 A32])) speller.c:60 64 {*movsi_internal}
     (nil))

(insn 80 79 421 11 (set (reg/f:SI 61 [ iftmp.1 ])
        (mem/f:SI (plus:SI (reg/f:SI 131)
                (const_int 8 [0x8])) [0 MEM[(char * *)argv_21(D) + 8B]+0 S4 A32])) speller.c:60 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))

(jump_insn 421 80 422 11 (set (pc)
        (label_ref 87)) 611 {jump}
     (nil)
 -> 87)

;; Successors:  13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61


(barrier 422 421 83)


;; Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 61 132

(code_label 83 422 84 12 7 "" [1 uses])

(note 84 83 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 86 12 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -276 [0xfffffffffffffeec])) [0 argv+0 S4 A32])) speller.c:60 64 {*movsi_internal}
     (nil))

(insn 86 85 87 12 (set (reg/f:SI 61 [ iftmp.1 ])
        (mem/f:SI (plus:SI (reg/f:SI 132)
                (const_int 4 [0x4])) [0 MEM[(char * *)argv_21(D) + 4B]+0 S4 A32])) speller.c:60 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (nil)))

;; Successors:  13 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61



;; Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  12 (fallthru) 11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 133 134

(code_label 87 86 88 13 8 "" [1 uses])

(note 88 87 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -244 [0xffffffffffffff0c])) [0 text+0 S4 A32])
        (reg/f:SI 61 [ iftmp.1 ])) speller.c:60 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 61 [ iftmp.1 ])
        (nil)))

(insn 90 89 91 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0xb6a302a0 *.LC4>)) speller.c:61 64 {*movsi_internal}
     (nil))

(insn 91 90 92 13 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -244 [0xffffffffffffff0c])) [0 text+0 S4 A32])) speller.c:61 64 {*movsi_internal}
     (nil))

(insn 92 91 93 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 133)) speller.c:61 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))

(call_insn 93 92 94 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fopen") [flags 0x41]  <function_decl 0xb69f3880 fopen>) [0 fopen S1 A8])
            (const_int 8 [0x8]))) speller.c:61 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 94 93 95 13 (set (reg:SI 134)
        (reg:SI 0 ax)) speller.c:61 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 95 94 96 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])
        (reg:SI 134)) speller.c:61 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))

(insn 96 95 97 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])
            (const_int 0 [0]))) speller.c:62 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 97 96 98 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) speller.c:62 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 107)

;; Successors:  14 (fallthru) 15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  13 (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 135

(note 98 97 99 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 99 98 100 14 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -244 [0xffffffffffffff0c])) [0 text+0 S4 A32])) speller.c:64 64 {*movsi_internal}
     (nil))

(insn 100 99 101 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 135)) speller.c:64 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 135)
        (nil)))

(insn 101 100 102 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0xb6a30300 *.LC5>)) speller.c:64 64 {*movsi_internal}
     (nil))

(call_insn 102 101 103 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:64 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(call_insn 103 102 104 14 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("unload") [flags 0x41]  <function_decl 0xb6a0e780 unload>) [0 unload S1 A8])
            (const_int 0 [0]))) speller.c:65 632 {*call_value}
     (expr_list:REG_UNUSED (reg:QI 0 ax)
        (nil))
    (nil))

(insn 104 103 423 14 (set (reg:SI 59 [ D.1851 ])
        (const_int 3 [0x3])) speller.c:66 64 {*movsi_internal}
     (nil))

(jump_insn 423 104 424 14 (set (pc)
        (label_ref 396)) 611 {jump}
     (nil)
 -> 396)

;; Successors:  38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


(barrier 424 423 107)


;; Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 136 137

(code_label 107 424 108 15 9 "" [1 uses])

(note 108 107 109 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0xb6a30360 *.LC6>)) speller.c:70 64 {*movsi_internal}
     (nil))

(call_insn 110 109 111 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb6990400 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) speller.c:70 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 111 110 112 15 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
        (const_int 0 [0])) speller.c:73 64 {*movsi_internal}
     (nil))

(insn 112 111 113 15 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -260 [0xfffffffffffffefc])) [0 misspellings+0 S4 A32])
        (const_int 0 [0])) speller.c:73 64 {*movsi_internal}
     (nil))

(insn 113 112 114 15 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -256 [0xffffffffffffff00])) [0 words+0 S4 A32])
        (const_int 0 [0])) speller.c:73 64 {*movsi_internal}
     (nil))

(insn 114 113 115 15 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:78 64 {*movsi_internal}
     (nil))

(insn 115 114 116 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 136)) speller.c:78 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 136)
        (nil)))

(call_insn 116 115 117 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fgetc") [flags 0x41]  <function_decl 0xb69f9480 fgetc>) [0 fgetc S1 A8])
            (const_int 4 [0x4]))) speller.c:78 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 117 116 118 15 (set (reg:SI 137)
        (reg:SI 0 ax)) speller.c:78 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 118 117 425 15 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
        (reg:SI 137)) speller.c:78 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 137)
        (nil)))

(jump_insn 425 118 426 15 (set (pc)
        (label_ref 275)) speller.c:78 611 {jump}
     (nil)
 -> 275)

;; Successors:  32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


(barrier 426 425 277)


;; Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  32
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 63 64 65 66 67 68 69 70

(code_label 277 426 121 16 21 "" [1 uses])

(note 121 277 122 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn/u 122 121 123 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__ctype_b_loc") [flags 0x41]  <function_decl 0xb69bab80 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) speller.c:81 632 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 123 122 124 16 (set (reg/f:SI 63 [ D.1868 ])
        (reg:SI 0 ax)) speller.c:81 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 124 123 125 16 (set (reg/f:SI 64 [ D.1869 ])
        (mem/f:SI (reg/f:SI 63 [ D.1868 ]) [0 *D.1868_38+0 S4 A32])) speller.c:81 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 63 [ D.1868 ])
        (nil)))

(insn 125 124 126 16 (set (reg:SI 65 [ c.2 ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])) speller.c:81 64 {*movsi_internal}
     (nil))

(insn 126 125 127 16 (parallel [
            (set (reg:SI 66 [ D.1871 ])
                (ashift:SI (reg:SI 65 [ c.2 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:81 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 65 [ c.2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 127 126 128 16 (parallel [
            (set (reg/f:SI 67 [ D.1872 ])
                (plus:SI (reg/f:SI 64 [ D.1869 ])
                    (reg:SI 66 [ D.1871 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:81 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 66 [ D.1871 ])
        (expr_list:REG_DEAD (reg/f:SI 64 [ D.1869 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 128 127 129 16 (set (reg:HI 68 [ D.1873 ])
        (mem:HI (reg/f:SI 67 [ D.1872 ]) [0 *D.1872_42+0 S2 A16])) speller.c:81 65 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 67 [ D.1872 ])
        (nil)))

(insn 129 128 130 16 (set (reg:SI 69 [ D.1874 ])
        (zero_extend:SI (reg:HI 68 [ D.1873 ]))) speller.c:81 119 {*zero_extendhisi2_movzwl}
     (expr_list:REG_DEAD (reg:HI 68 [ D.1873 ])
        (nil)))

(insn 130 129 131 16 (parallel [
            (set (reg:SI 70 [ D.1875 ])
                (and:SI (reg:SI 69 [ D.1874 ])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:81 377 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 69 [ D.1874 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 131 130 132 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ D.1875 ])
            (const_int 0 [0]))) speller.c:81 2 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 70 [ D.1875 ])
        (nil)))

(jump_insn 132 131 133 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) speller.c:81 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 139)

;; Successors:  19 17 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  16 (fallthru)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(note 133 132 134 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
            (const_int 39 [0x27]))) speller.c:81 6 {*cmpsi_1}
     (nil))

(jump_insn 135 134 136 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 179)
            (pc))) speller.c:81 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 179)

;; Successors:  18 (fallthru) 23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  17 (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(note 136 135 137 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 138 18 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
            (const_int 0 [0]))) speller.c:81 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 138 137 139 18 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 179)
            (pc))) speller.c:81 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil))
 -> 179)

;; Successors:  19 (fallthru) 23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  16 18 (fallthru)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 138 139 140 141

(code_label 139 138 140 19 11 "" [1 uses])

(note 140 139 141 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 141 140 142 19 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])) speller.c:84 64 {*movsi_internal}
     (nil))

(insn 142 141 143 19 (set (reg:QI 96 [ D.1878 ])
        (subreg:QI (reg:SI 138) 0)) speller.c:84 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))

(insn 143 142 144 19 (parallel [
            (set (reg:SI 139)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -50 [0xffffffffffffffce])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:84 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 144 143 145 19 (set (reg:SI 141)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])) speller.c:84 64 {*movsi_internal}
     (nil))

(insn 145 144 146 19 (parallel [
            (set (reg/f:SI 140)
                (plus:SI (reg:SI 139)
                    (reg:SI 141)))
            (clobber (reg:CC 17 flags))
        ]) speller.c:84 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 141)
        (expr_list:REG_DEAD (reg:SI 139)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 146 145 147 19 (set (mem/j:QI (reg/f:SI 140) [0 word S1 A8])
        (reg:QI 96 [ D.1878 ])) speller.c:84 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_DEAD (reg:QI 96 [ D.1878 ])
            (nil))))

(insn 147 146 148 19 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                        (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:85 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 148 147 149 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
            (const_int 45 [0x2d]))) speller.c:88 6 {*cmpsi_1}
     (nil))

(jump_insn 149 148 169 19 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 268)
            (pc))) speller.c:88 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 268)

;; Successors:  20 (fallthru) 31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  19 (fallthru) 21 (dfs_back)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 142 143

(code_label 169 149 151 20 15 "" [1 uses])

(note 151 169 152 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 152 151 153 20 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:91 64 {*movsi_internal}
     (nil))

(insn 153 152 154 20 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 142)) speller.c:91 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))

(call_insn 154 153 155 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fgetc") [flags 0x41]  <function_decl 0xb69f9480 fgetc>) [0 fgetc S1 A8])
            (const_int 4 [0x4]))) speller.c:91 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 155 154 156 20 (set (reg:SI 143)
        (reg:SI 0 ax)) speller.c:91 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 156 155 157 20 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
        (reg:SI 143)) speller.c:91 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))

(insn 157 156 158 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) speller.c:91 6 {*cmpsi_1}
     (nil))

(jump_insn 158 157 159 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) speller.c:91 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 172)

;; Successors:  21 (fallthru) 22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  20 (fallthru)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 97 98 99 100 101 102 103 104

(note 159 158 160 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(call_insn/u 160 159 161 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__ctype_b_loc") [flags 0x41]  <function_decl 0xb69bab80 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) speller.c:91 632 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 161 160 162 21 (set (reg/f:SI 97 [ D.1882 ])
        (reg:SI 0 ax)) speller.c:91 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 162 161 163 21 (set (reg/f:SI 98 [ D.1883 ])
        (mem/f:SI (reg/f:SI 97 [ D.1882 ]) [0 *D.1882_81+0 S4 A32])) speller.c:91 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 97 [ D.1882 ])
        (nil)))

(insn 163 162 164 21 (set (reg:SI 99 [ c.3 ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])) speller.c:91 64 {*movsi_internal}
     (nil))

(insn 164 163 165 21 (parallel [
            (set (reg:SI 100 [ D.1885 ])
                (ashift:SI (reg:SI 99 [ c.3 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:91 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 99 [ c.3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 165 164 166 21 (parallel [
            (set (reg/f:SI 101 [ D.1886 ])
                (plus:SI (reg/f:SI 98 [ D.1883 ])
                    (reg:SI 100 [ D.1885 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:91 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 100 [ D.1885 ])
        (expr_list:REG_DEAD (reg/f:SI 98 [ D.1883 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 166 165 167 21 (set (reg:HI 102 [ D.1887 ])
        (mem:HI (reg/f:SI 101 [ D.1886 ]) [0 *D.1886_85+0 S2 A16])) speller.c:91 65 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 101 [ D.1886 ])
        (nil)))

(insn 167 166 168 21 (set (reg:SI 103 [ D.1888 ])
        (zero_extend:SI (reg:HI 102 [ D.1887 ]))) speller.c:91 119 {*zero_extendhisi2_movzwl}
     (expr_list:REG_DEAD (reg:HI 102 [ D.1887 ])
        (nil)))

(insn 168 167 170 21 (parallel [
            (set (reg:SI 104 [ D.1889 ])
                (and:SI (reg:SI 103 [ D.1888 ])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:91 377 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 103 [ D.1888 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 170 168 171 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 104 [ D.1889 ])
            (const_int 0 [0]))) speller.c:91 2 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 104 [ D.1889 ])
        (nil)))

(jump_insn 171 170 172 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) speller.c:91 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 169)

;; Successors:  20 (dfs_back) 22 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  20 21 (fallthru)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

(code_label 172 171 173 22 14 "" [1 uses])

(note 173 172 174 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 174 173 427 22 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
        (const_int 0 [0])) speller.c:94 64 {*movsi_internal}
     (nil))

(jump_insn 427 174 428 22 (set (pc)
        (label_ref 268)) speller.c:88 611 {jump}
     (nil)
 -> 268)

;; Successors:  31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


(barrier 428 427 179)


;; Basic block 23 , prev 22, next 24, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  17 18
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 71 72 73 74 75 76 77 78

(code_label 179 428 180 23 12 "" [2 uses])

(note 180 179 181 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(call_insn/u 181 180 182 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__ctype_b_loc") [flags 0x41]  <function_decl 0xb69bab80 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) speller.c:99 632 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 182 181 183 23 (set (reg/f:SI 71 [ D.1890 ])
        (reg:SI 0 ax)) speller.c:99 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 183 182 184 23 (set (reg/f:SI 72 [ D.1891 ])
        (mem/f:SI (reg/f:SI 71 [ D.1890 ]) [0 *D.1890_46+0 S4 A32])) speller.c:99 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 71 [ D.1890 ])
        (nil)))

(insn 184 183 185 23 (set (reg:SI 73 [ c.4 ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])) speller.c:99 64 {*movsi_internal}
     (nil))

(insn 185 184 186 23 (parallel [
            (set (reg:SI 74 [ D.1893 ])
                (ashift:SI (reg:SI 73 [ c.4 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:99 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 73 [ c.4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 186 185 187 23 (parallel [
            (set (reg/f:SI 75 [ D.1894 ])
                (plus:SI (reg/f:SI 72 [ D.1891 ])
                    (reg:SI 74 [ D.1893 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:99 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 74 [ D.1893 ])
        (expr_list:REG_DEAD (reg/f:SI 72 [ D.1891 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 187 186 188 23 (set (reg:HI 76 [ D.1895 ])
        (mem:HI (reg/f:SI 75 [ D.1894 ]) [0 *D.1894_50+0 S2 A16])) speller.c:99 65 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 75 [ D.1894 ])
        (nil)))

(insn 188 187 189 23 (set (reg:SI 77 [ D.1896 ])
        (zero_extend:SI (reg:HI 76 [ D.1895 ]))) speller.c:99 119 {*zero_extendhisi2_movzwl}
     (expr_list:REG_DEAD (reg:HI 76 [ D.1895 ])
        (nil)))

(insn 189 188 190 23 (parallel [
            (set (reg:SI 78 [ D.1897 ])
                (and:SI (reg:SI 77 [ D.1896 ])
                    (const_int 2048 [0x800])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:99 377 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 77 [ D.1896 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 190 189 191 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 78 [ D.1897 ])
            (const_int 0 [0]))) speller.c:99 2 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 78 [ D.1897 ])
        (nil)))

(jump_insn 191 190 211 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) speller.c:99 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 219)

;; Successors:  24 (fallthru) 27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 24 , prev 23, next 25, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  23 (fallthru) 25 (dfs_back)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 144 145

(code_label 211 191 193 24 19 "" [1 uses])

(note 193 211 194 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 24 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:102 64 {*movsi_internal}
     (nil))

(insn 195 194 196 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 144)) speller.c:102 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 144)
        (nil)))

(call_insn 196 195 197 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fgetc") [flags 0x41]  <function_decl 0xb69f9480 fgetc>) [0 fgetc S1 A8])
            (const_int 4 [0x4]))) speller.c:102 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 197 196 198 24 (set (reg:SI 145)
        (reg:SI 0 ax)) speller.c:102 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 198 197 199 24 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
        (reg:SI 145)) speller.c:102 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))

(insn 199 198 200 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) speller.c:102 6 {*cmpsi_1}
     (nil))

(jump_insn 200 199 201 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 214)
            (pc))) speller.c:102 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 214)

;; Successors:  25 (fallthru) 26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 25 , prev 24, next 26, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  24 (fallthru)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 79 80 81 82 83 84 85 86

(note 201 200 202 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(call_insn/u 202 201 203 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__ctype_b_loc") [flags 0x41]  <function_decl 0xb69bab80 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) speller.c:102 632 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 203 202 204 25 (set (reg/f:SI 79 [ D.1901 ])
        (reg:SI 0 ax)) speller.c:102 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 204 203 205 25 (set (reg/f:SI 80 [ D.1902 ])
        (mem/f:SI (reg/f:SI 79 [ D.1901 ]) [0 *D.1901_55+0 S4 A32])) speller.c:102 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 79 [ D.1901 ])
        (nil)))

(insn 205 204 206 25 (set (reg:SI 81 [ c.5 ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])) speller.c:102 64 {*movsi_internal}
     (nil))

(insn 206 205 207 25 (parallel [
            (set (reg:SI 82 [ D.1904 ])
                (ashift:SI (reg:SI 81 [ c.5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:102 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 81 [ c.5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 207 206 208 25 (parallel [
            (set (reg/f:SI 83 [ D.1905 ])
                (plus:SI (reg/f:SI 80 [ D.1902 ])
                    (reg:SI 82 [ D.1904 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:102 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 82 [ D.1904 ])
        (expr_list:REG_DEAD (reg/f:SI 80 [ D.1902 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 208 207 209 25 (set (reg:HI 84 [ D.1906 ])
        (mem:HI (reg/f:SI 83 [ D.1905 ]) [0 *D.1905_59+0 S2 A16])) speller.c:102 65 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 83 [ D.1905 ])
        (nil)))

(insn 209 208 210 25 (set (reg:SI 85 [ D.1907 ])
        (zero_extend:SI (reg:HI 84 [ D.1906 ]))) speller.c:102 119 {*zero_extendhisi2_movzwl}
     (expr_list:REG_DEAD (reg:HI 84 [ D.1906 ])
        (nil)))

(insn 210 209 212 25 (parallel [
            (set (reg:SI 86 [ D.1908 ])
                (and:SI (reg:SI 85 [ D.1907 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:102 377 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 85 [ D.1907 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 212 210 213 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ D.1908 ])
            (const_int 0 [0]))) speller.c:102 2 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 86 [ D.1908 ])
        (nil)))

(jump_insn 213 212 214 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 211)
            (pc))) speller.c:102 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 211)

;; Successors:  24 (dfs_back) 26 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 26 , prev 25, next 27, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  24 25 (fallthru)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

(code_label 214 213 215 26 18 "" [1 uses])

(note 215 214 216 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 216 215 429 26 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
        (const_int 0 [0])) speller.c:105 64 {*movsi_internal}
     (nil))

(jump_insn 429 216 430 26 (set (pc)
        (label_ref 268)) 611 {jump}
     (nil)
 -> 268)

;; Successors:  31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


(barrier 430 429 219)


;; Basic block 27 , prev 26, next 28, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(code_label 219 430 220 27 17 "" [1 uses])

(note 220 219 221 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 221 220 222 27 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
            (const_int 0 [0]))) speller.c:109 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 222 221 223 27 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 268)
            (pc))) speller.c:109 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil))
 -> 268)

;; Successors:  28 (fallthru) 31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 28 , prev 27, next 29, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  27 (fallthru)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 87 88 89 90 91 92 93 94 95 146 147 148 149 150 151 152 153

(note 223 222 224 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 224 223 225 28 (parallel [
            (set (reg:SI 146)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -50 [0xffffffffffffffce])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:112 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 225 224 226 28 (set (reg:SI 148)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])) speller.c:112 64 {*movsi_internal}
     (nil))

(insn 226 225 227 28 (parallel [
            (set (reg/f:SI 147)
                (plus:SI (reg:SI 146)
                    (reg:SI 148)))
            (clobber (reg:CC 17 flags))
        ]) speller.c:112 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 148)
        (expr_list:REG_DEAD (reg:SI 146)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 227 226 228 28 (set (mem/j:QI (reg/f:SI 147) [0 word S1 A8])
        (const_int 0 [0])) speller.c:112 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:SI 147)
        (nil)))

(insn 228 227 229 28 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                        (const_int -256 [0xffffffffffffff00])) [0 words+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -256 [0xffffffffffffff00])) [0 words+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:115 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 229 228 230 28 (parallel [
            (set (reg:SI 149)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:118 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 230 229 231 28 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 149)) speller.c:118 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 149)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(insn 231 230 232 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:118 64 {*movsi_internal}
     (nil))

(call_insn 232 231 233 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:118 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 233 232 234 28 (parallel [
            (set (reg:SI 150)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -50 [0xffffffffffffffce])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:119 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 234 233 235 28 (set (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 150)) speller.c:119 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -50 [0xffffffffffffffce]))
            (nil))))

(call_insn 235 234 236 28 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("check") [flags 0x41]  <function_decl 0xb6a0e600 check>) [0 check S1 A8])
            (const_int 4 [0x4]))) speller.c:119 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 236 235 237 28 (set (reg:QI 87 [ D.1912 ])
        (reg:QI 0 ax)) speller.c:119 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))

(insn 237 236 238 28 (parallel [
            (set (reg:SI 88 [ D.1913 ])
                (zero_extend:SI (reg:QI 87 [ D.1912 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:119 123 {*zero_extendqisi2_movzbl_and}
     (expr_list:REG_DEAD (reg:QI 87 [ D.1912 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 238 237 239 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ D.1913 ])
            (const_int 0 [0]))) speller.c:119 2 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 88 [ D.1913 ])
        (nil)))

(insn 239 238 240 28 (set (reg:QI 89 [ D.1914 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) speller.c:119 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))

(insn 240 239 241 28 (parallel [
            (set (reg:QI 90 [ D.1915 ])
                (xor:QI (reg:QI 89 [ D.1914 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:119 401 {*xorqi_1}
     (expr_list:REG_DEAD (reg:QI 89 [ D.1914 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 241 240 242 28 (parallel [
            (set (reg:SI 91 [ D.1916 ])
                (zero_extend:SI (reg:QI 90 [ D.1915 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:119 123 {*zero_extendqisi2_movzbl_and}
     (expr_list:REG_DEAD (reg:QI 90 [ D.1915 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 242 241 243 28 (set (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -266 [0xfffffffffffffef6])) [0 misspelled+0 S1 A8])
        (subreg:QI (reg:SI 91 [ D.1916 ]) 0)) speller.c:119 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ D.1916 ])
        (nil)))

(insn 243 242 244 28 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                        (const_int -266 [0xfffffffffffffef6])) [0 misspelled+0 S1 A8])
                (and:QI (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                            (const_int -266 [0xfffffffffffffef6])) [0 misspelled+0 S1 A8])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:119 380 {*andqi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 244 243 245 28 (parallel [
            (set (reg:SI 151)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:120 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 245 244 246 28 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 151)) speller.c:120 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 151)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 246 245 247 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:120 64 {*movsi_internal}
     (nil))

(call_insn 247 246 248 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:120 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 248 247 249 28 (set (reg:XF 92 [ D.1917 ])
        (float_extend:XF (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                    (const_int -232 [0xffffffffffffff18])) [0 ti_check+0 S8 A64]))) speller.c:123 139 {*extenddfxf2_i387}
     (nil))

(insn 249 248 250 28 (parallel [
            (set (reg:SI 152)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:123 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 250 249 251 28 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 152)) speller.c:123 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 251 250 252 28 (parallel [
            (set (reg:SI 153)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:123 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 252 251 253 28 (set (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 153)) speller.c:123 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(call_insn 253 252 254 28 (set (reg:DF 8 st)
        (call (mem:QI (symbol_ref:SI ("calculate") [flags 0x3]  <function_decl 0xb6a0e800 calculate>) [0 calculate S1 A8])
            (const_int 8 [0x8]))) speller.c:123 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 254 253 255 28 (set (reg:DF 93 [ D.1918 ])
        (reg:DF 8 st)) speller.c:123 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 8 st)
        (nil)))

(insn 255 254 256 28 (set (reg:XF 94 [ D.1919 ])
        (float_extend:XF (reg:DF 93 [ D.1918 ]))) speller.c:123 139 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 93 [ D.1918 ])
        (nil)))

(insn 256 255 435 28 (set (reg:XF 95 [ D.1920 ])
        (plus:XF (reg:XF 92 [ D.1917 ])
            (reg:XF 94 [ D.1919 ]))) speller.c:123 772 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 94 [ D.1919 ])
        (expr_list:REG_DEAD (reg:XF 92 [ D.1917 ])
            (nil))))

(insn 435 256 258 28 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 ti_check+0 S8 A64])
        (float_truncate:DF (reg:XF 95 [ D.1920 ]))) speller.c:123 151 {*truncxfdf2_i387}
     (expr_list:REG_DEAD (reg:XF 95 [ D.1920 ])
        (nil)))

(insn 258 435 259 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                    (const_int -266 [0xfffffffffffffef6])) [0 misspelled+0 S1 A8])
            (const_int 0 [0]))) speller.c:126 0 {*cmpqi_ccno_1}
     (nil))

(jump_insn 259 258 260 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) speller.c:126 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 265)

;; Successors:  29 (fallthru) 30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 29 , prev 28, next 30, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  28 (fallthru)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 154

(note 260 259 261 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 261 260 262 29 (parallel [
            (set (reg:SI 154)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -50 [0xffffffffffffffce])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:128 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 262 261 263 29 (set (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 154)) speller.c:128 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 154)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -50 [0xffffffffffffffce]))
            (nil))))

(call_insn 263 262 264 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0xb6990400 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) speller.c:128 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 264 263 265 29 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                        (const_int -260 [0xfffffffffffffefc])) [0 misspellings+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -260 [0xfffffffffffffefc])) [0 misspellings+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:129 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

;; Successors:  30 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 30 , prev 29, next 31, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  28 29 (fallthru)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

(code_label 265 264 266 30 20 "" [1 uses])

(note 266 265 267 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 267 266 268 30 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [0 index+0 S4 A32])
        (const_int 0 [0])) speller.c:133 64 {*movsi_internal}
     (nil))

;; Successors:  31 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 31 , prev 30, next 32, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  19 22 [100.0%]  27 30 (fallthru) 26 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 155 156

(code_label 268 267 269 31 16 "" [4 uses])

(note 269 268 270 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 270 269 271 31 (set (reg/f:SI 155)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:78 64 {*movsi_internal}
     (nil))

(insn 271 270 272 31 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 155)) speller.c:78 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 155)
        (nil)))

(call_insn 272 271 273 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fgetc") [flags 0x41]  <function_decl 0xb69f9480 fgetc>) [0 fgetc S1 A8])
            (const_int 4 [0x4]))) speller.c:78 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 273 272 274 31 (set (reg:SI 156)
        (reg:SI 0 ax)) speller.c:78 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 274 273 275 31 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
        (reg:SI 156)) speller.c:78 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

;; Successors:  32 (fallthru,dfs_back)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 32 , prev 31, next 33, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  31 (fallthru,dfs_back) 15 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(code_label 275 274 276 32 10 "" [1 uses])

(note 276 275 278 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 278 276 279 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -252 [0xffffffffffffff04])) [0 c+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) speller.c:78 6 {*cmpsi_1}
     (nil))

(jump_insn 279 278 280 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 277)
            (pc))) speller.c:78 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 277)

;; Successors:  16 33 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 33 , prev 32, next 34, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  32 (fallthru)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 105 157

(note 280 279 281 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 281 280 282 33 (set (reg/f:SI 157)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:138 64 {*movsi_internal}
     (nil))

(insn 282 281 283 33 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 157)) speller.c:138 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 157)
        (nil)))

(call_insn 283 282 284 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("ferror") [flags 0x41]  <function_decl 0xb69f9e80 ferror>) [0 ferror S1 A8])
            (const_int 4 [0x4]))) speller.c:138 632 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 284 283 285 33 (set (reg:SI 105 [ D.1923 ])
        (reg:SI 0 ax)) speller.c:138 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 285 284 286 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 105 [ D.1923 ])
            (const_int 0 [0]))) speller.c:138 2 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 105 [ D.1923 ])
        (nil)))

(jump_insn 286 285 287 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 299)
            (pc))) speller.c:138 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 299)

;; Successors:  34 (fallthru) 35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 34 , prev 33, next 35, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  33 (fallthru)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 158 159

(note 287 286 288 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 288 287 289 34 (set (reg/f:SI 158)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:140 64 {*movsi_internal}
     (nil))

(insn 289 288 290 34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 158)) speller.c:140 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 158)
        (nil)))

(call_insn 290 289 291 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fclose") [flags 0x41]  <function_decl 0xb69f3780 fclose>) [0 fclose S1 A8])
            (const_int 4 [0x4]))) speller.c:140 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 291 290 292 34 (set (reg/f:SI 159)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -244 [0xffffffffffffff0c])) [0 text+0 S4 A32])) speller.c:141 64 {*movsi_internal}
     (nil))

(insn 292 291 293 34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 159)) speller.c:141 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 159)
        (nil)))

(insn 293 292 294 34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0xb6a303c0 *.LC7>)) speller.c:141 64 {*movsi_internal}
     (nil))

(call_insn 294 293 295 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:141 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(call_insn 295 294 296 34 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("unload") [flags 0x41]  <function_decl 0xb6a0e780 unload>) [0 unload S1 A8])
            (const_int 0 [0]))) speller.c:142 632 {*call_value}
     (expr_list:REG_UNUSED (reg:QI 0 ax)
        (nil))
    (nil))

(insn 296 295 431 34 (set (reg:SI 59 [ D.1851 ])
        (const_int 4 [0x4])) speller.c:143 64 {*movsi_internal}
     (nil))

(jump_insn 431 296 432 34 (set (pc)
        (label_ref 396)) 611 {jump}
     (nil)
 -> 396)

;; Successors:  38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


(barrier 432 431 299)


;; Basic block 35 , prev 34, next 36, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 106 160 161 162 163 164 165 166 167 168 169 170

(code_label 299 432 300 35 22 "" [1 uses])

(note 300 299 301 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 301 300 302 35 (set (reg/f:SI 160)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 fp+0 S4 A32])) speller.c:147 64 {*movsi_internal}
     (nil))

(insn 302 301 303 35 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 160)) speller.c:147 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 160)
        (nil)))

(call_insn 303 302 304 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fclose") [flags 0x41]  <function_decl 0xb69f3780 fclose>) [0 fclose S1 A8])
            (const_int 4 [0x4]))) speller.c:147 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (nil)))

(insn 304 303 305 35 (parallel [
            (set (reg:SI 161)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:150 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 305 304 306 35 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 161)) speller.c:150 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 161)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(insn 306 305 307 35 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:150 64 {*movsi_internal}
     (nil))

(call_insn 307 306 308 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:150 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(call_insn 308 307 309 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("size") [flags 0x41]  <function_decl 0xb6a0e700 size>) [0 size S1 A8])
            (const_int 0 [0]))) speller.c:151 632 {*call_value}
     (nil)
    (nil))

(insn 309 308 310 35 (set (reg:SI 162)
        (reg:SI 0 ax)) speller.c:151 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 310 309 311 35 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -236 [0xffffffffffffff14])) [0 n+0 S4 A32])
        (reg:SI 162)) speller.c:151 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(insn 311 310 312 35 (parallel [
            (set (reg:SI 163)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:152 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 312 311 313 35 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 163)) speller.c:152 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 313 312 314 35 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:152 64 {*movsi_internal}
     (nil))

(call_insn 314 313 315 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:152 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 315 314 316 35 (parallel [
            (set (reg:SI 164)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:155 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 316 315 317 35 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 164)) speller.c:155 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 164)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 317 316 318 35 (parallel [
            (set (reg:SI 165)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:155 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 318 317 319 35 (set (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 165)) speller.c:155 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(call_insn 319 318 320 35 (set (reg:DF 8 st)
        (call (mem:QI (symbol_ref:SI ("calculate") [flags 0x3]  <function_decl 0xb6a0e800 calculate>) [0 calculate S1 A8])
            (const_int 8 [0x8]))) speller.c:155 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 320 319 321 35 (set (reg:DF 166)
        (reg:DF 8 st)) speller.c:155 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 8 st)
        (nil)))

(insn 321 320 322 35 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 ti_size+0 S8 A64])
        (reg:DF 166)) speller.c:155 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 166)
        (nil)))

(insn 322 321 323 35 (parallel [
            (set (reg:SI 167)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:158 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 323 322 324 35 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 167)) speller.c:158 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 167)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(insn 324 323 325 35 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:158 64 {*movsi_internal}
     (nil))

(call_insn 325 324 326 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:158 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(call_insn 326 325 327 35 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("unload") [flags 0x41]  <function_decl 0xb6a0e780 unload>) [0 unload S1 A8])
            (const_int 0 [0]))) speller.c:159 632 {*call_value}
     (nil)
    (nil))

(insn 327 326 328 35 (set (reg:QI 168)
        (reg:QI 0 ax)) speller.c:159 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))

(insn 328 327 329 35 (set (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -265 [0xfffffffffffffef7])) [0 unloaded+0 S1 A8])
        (reg:QI 168)) speller.c:159 66 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 168)
        (nil)))

(insn 329 328 330 35 (parallel [
            (set (reg:SI 169)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:160 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 330 329 331 35 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 169)) speller.c:160 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 169)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 331 330 332 35 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0])) speller.c:160 64 {*movsi_internal}
     (nil))

(call_insn 332 331 333 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getrusage") [flags 0x41]  <function_decl 0xb6a0e100 getrusage>) [0 getrusage S1 A8])
            (const_int 8 [0x8]))) speller.c:160 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (mem:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 333 332 334 35 (set (reg:QI 170)
        (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                (const_int -265 [0xfffffffffffffef7])) [0 unloaded+0 S1 A8])) speller.c:163 66 {*movqi_internal}
     (nil))

(insn 334 333 335 35 (parallel [
            (set (reg:QI 106 [ D.1926 ])
                (xor:QI (reg:QI 170)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:163 401 {*xorqi_1}
     (expr_list:REG_DEAD (reg:QI 170)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                            (const_int -265 [0xfffffffffffffef7])) [0 unloaded+0 S1 A8])
                    (const_int 1 [0x1]))
                (nil)))))

(insn 335 334 336 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 106 [ D.1926 ])
            (const_int 0 [0]))) speller.c:163 0 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 106 [ D.1926 ])
        (nil)))

(jump_insn 336 335 337 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 345)
            (pc))) speller.c:163 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 345)

;; Successors:  36 (fallthru) 37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 36 , prev 35, next 37, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  35 (fallthru)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 171

(note 337 336 338 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 338 337 339 36 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 dictionary+0 S4 A32])) speller.c:165 64 {*movsi_internal}
     (nil))

(insn 339 338 340 36 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 171)) speller.c:165 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 171)
        (nil)))

(insn 340 339 341 36 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0xb6a30420 *.LC8>)) speller.c:165 64 {*movsi_internal}
     (nil))

(call_insn 341 340 342 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:165 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 342 341 433 36 (set (reg:SI 59 [ D.1851 ])
        (const_int 5 [0x5])) speller.c:166 64 {*movsi_internal}
     (nil))

(jump_insn 433 342 434 36 (set (pc)
        (label_ref 396)) 611 {jump}
     (nil)
 -> 396)

;; Successors:  38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


(barrier 434 433 345)


;; Basic block 37 , prev 36, next 38, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 107 108 109 110 111 112 113 114 172 173 174 175 176 177 178 179 180 181

(code_label 345 434 346 37 23 "" [1 uses])

(note 346 345 347 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 347 346 348 37 (parallel [
            (set (reg:SI 172)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:170 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 348 347 349 37 (set (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 172)) speller.c:170 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 172)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -124 [0xffffffffffffff84]))
            (nil))))

(insn 349 348 350 37 (parallel [
            (set (reg:SI 173)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:170 250 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 350 349 351 37 (set (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 173)) speller.c:170 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -196 [0xffffffffffffff3c]))
            (nil))))

(call_insn 351 350 352 37 (set (reg:DF 8 st)
        (call (mem:QI (symbol_ref:SI ("calculate") [flags 0x3]  <function_decl 0xb6a0e800 calculate>) [0 calculate S1 A8])
            (const_int 8 [0x8]))) speller.c:170 632 {*call_value}
     (nil)
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 352 351 353 37 (set (reg:DF 174)
        (reg:DF 8 st)) speller.c:170 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 8 st)
        (nil)))

(insn 353 352 354 37 (set (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 ti_unload+0 S8 A64])
        (reg:DF 174)) speller.c:170 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 174)
        (nil)))

(insn 354 353 355 37 (set (reg:SI 175)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -260 [0xfffffffffffffefc])) [0 misspellings+0 S4 A32])) speller.c:173 64 {*movsi_internal}
     (nil))

(insn 355 354 356 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 175)) speller.c:173 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))

(insn 356 355 357 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0xb6a30480 *.LC9>)) speller.c:173 64 {*movsi_internal}
     (nil))

(call_insn 357 356 358 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:173 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 358 357 359 37 (set (reg:SI 176)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -236 [0xffffffffffffff14])) [0 n+0 S4 A32])) speller.c:174 64 {*movsi_internal}
     (nil))

(insn 359 358 360 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 176)) speller.c:174 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 176)
        (nil)))

(insn 360 359 361 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0xb6a304e0 *.LC10>)) speller.c:174 64 {*movsi_internal}
     (nil))

(call_insn 361 360 362 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:174 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 362 361 363 37 (set (reg:SI 177)
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -256 [0xffffffffffffff00])) [0 words+0 S4 A32])) speller.c:175 64 {*movsi_internal}
     (nil))

(insn 363 362 364 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 177)) speller.c:175 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 177)
        (nil)))

(insn 364 363 365 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC11") [flags 0x2]  <var_decl 0xb6a30540 *.LC11>)) speller.c:175 64 {*movsi_internal}
     (nil))

(call_insn 365 364 366 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) speller.c:175 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:REG_BR_PRED (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S4 A32]))
            (nil))))

(insn 366 365 367 37 (set (reg:DF 178)
        (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 ti_load+0 S8 A64])) speller.c:176 109 {*movdf_internal}
     (nil))

(insn 367 366 368 37 (set (mem:DF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DF 178)) speller.c:176 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 178)
        (nil)))

(insn 368 367 369 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC12") [flags 0x2]  <var_decl 0xb6a305a0 *.LC12>)) speller.c:176 64 {*movsi_internal}
     (nil))

(call_insn 369 368 370 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 12 [0xc]))) speller.c:176 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:DF (use (mem:DF (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S8 A32]))
            (nil))))

(insn 370 369 371 37 (set (reg:DF 179)
        (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 ti_check+0 S8 A64])) speller.c:177 109 {*movdf_internal}
     (nil))

(insn 371 370 372 37 (set (mem:DF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DF 179)) speller.c:177 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 179)
        (nil)))

(insn 372 371 373 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC13") [flags 0x2]  <var_decl 0xb6a30600 *.LC13>)) speller.c:177 64 {*movsi_internal}
     (nil))

(call_insn 373 372 374 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 12 [0xc]))) speller.c:177 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:DF (use (mem:DF (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S8 A32]))
            (nil))))

(insn 374 373 375 37 (set (reg:DF 180)
        (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 ti_size+0 S8 A64])) speller.c:178 109 {*movdf_internal}
     (nil))

(insn 375 374 376 37 (set (mem:DF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DF 180)) speller.c:178 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 180)
        (nil)))

(insn 376 375 377 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC14") [flags 0x2]  <var_decl 0xb6a30660 *.LC14>)) speller.c:178 64 {*movsi_internal}
     (nil))

(call_insn 377 376 378 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 12 [0xc]))) speller.c:178 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:DF (use (mem:DF (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S8 A32]))
            (nil))))

(insn 378 377 379 37 (set (reg:DF 181)
        (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 ti_unload+0 S8 A64])) speller.c:179 109 {*movdf_internal}
     (nil))

(insn 379 378 380 37 (set (mem:DF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DF 181)) speller.c:179 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 181)
        (nil)))

(insn 380 379 381 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC15") [flags 0x2]  <var_decl 0xb6a306c0 *.LC15>)) speller.c:179 64 {*movsi_internal}
     (nil))

(call_insn 381 380 382 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 12 [0xc]))) speller.c:179 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:DF (use (mem:DF (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S8 A32]))
            (nil))))

(insn 382 381 383 37 (set (reg:XF 107 [ D.1929 ])
        (float_extend:XF (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                    (const_int -224 [0xffffffffffffff20])) [0 ti_load+0 S8 A64]))) speller.c:180 139 {*extenddfxf2_i387}
     (nil))

(insn 383 382 384 37 (set (reg:XF 108 [ D.1930 ])
        (float_extend:XF (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                    (const_int -232 [0xffffffffffffff18])) [0 ti_check+0 S8 A64]))) speller.c:180 139 {*extenddfxf2_i387}
     (nil))

(insn 384 383 385 37 (set (reg:XF 109 [ D.1931 ])
        (plus:XF (reg:XF 107 [ D.1929 ])
            (reg:XF 108 [ D.1930 ]))) speller.c:180 772 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 108 [ D.1930 ])
        (expr_list:REG_DEAD (reg:XF 107 [ D.1929 ])
            (nil))))

(insn 385 384 386 37 (set (reg:XF 110 [ D.1932 ])
        (float_extend:XF (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                    (const_int -216 [0xffffffffffffff28])) [0 ti_size+0 S8 A64]))) speller.c:180 139 {*extenddfxf2_i387}
     (nil))

(insn 386 385 387 37 (set (reg:XF 111 [ D.1933 ])
        (plus:XF (reg:XF 109 [ D.1931 ])
            (reg:XF 110 [ D.1932 ]))) speller.c:180 772 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 110 [ D.1932 ])
        (expr_list:REG_DEAD (reg:XF 109 [ D.1931 ])
            (nil))))

(insn 387 386 388 37 (set (reg:XF 112 [ D.1934 ])
        (float_extend:XF (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                    (const_int -208 [0xffffffffffffff30])) [0 ti_unload+0 S8 A64]))) speller.c:180 139 {*extenddfxf2_i387}
     (nil))

(insn 388 387 389 37 (set (reg:XF 113 [ D.1935 ])
        (plus:XF (reg:XF 111 [ D.1933 ])
            (reg:XF 112 [ D.1934 ]))) speller.c:180 772 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 112 [ D.1934 ])
        (expr_list:REG_DEAD (reg:XF 111 [ D.1933 ])
            (nil))))

(insn 389 388 390 37 (parallel [
            (set (reg:DF 114 [ D.1936 ])
                (float_truncate:DF (reg:XF 113 [ D.1935 ])))
            (clobber (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                        (const_int -288 [0xfffffffffffffee0])) [0 S8 A64]))
        ]) speller.c:180 147 {*truncxfdf2_mixed}
     (expr_list:REG_DEAD (reg:XF 113 [ D.1935 ])
        (nil)))

(insn 390 389 391 37 (set (mem:DF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DF 114 [ D.1936 ])) speller.c:180 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 114 [ D.1936 ])
        (nil)))

(insn 391 390 392 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC16") [flags 0x2]  <var_decl 0xb6a30720 *.LC16>)) speller.c:180 64 {*movsi_internal}
     (nil))

(call_insn 392 391 393 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0xb6990180 printf>) [0 __builtin_printf S1 A8])
            (const_int 12 [0xc]))) speller.c:180 632 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (expr_list:REG_BR_PRED (use (mem/f:SI (reg/f:SI 7 sp) [0 S4 A32]))
        (expr_list:DF (use (mem:DF (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0 S8 A32]))
            (nil))))

(insn 393 392 396 37 (set (reg:SI 59 [ D.1851 ])
        (const_int 0 [0])) speller.c:184 64 {*movsi_internal}
     (nil))

;; Successors:  38 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59



;; Basic block 38 , prev 37, next 39, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  37 (fallthru) 34 [100.0%]  4 [100.0%]  9 [100.0%]  14 [100.0%]  36 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 17 [flags] 115

(code_label 396 393 397 38 24 "" [5 uses])

(note 397 396 398 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 398 397 402 38 (set (reg:SI 115 [ <retval> ])
        (reg:SI 59 [ D.1851 ])) 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ D.1851 ])
        (nil)))

(insn 402 398 405 38 (set (reg/i:SI 0 ax)
        (reg:SI 115 [ <retval> ])) speller.c:185 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))

(insn 405 402 406 38 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:SI (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 D.1941+0 S4 A32])
                        (const_int 20 [0x14])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:SI))
        ]) speller.c:185 942 {stack_tls_protect_test_si}
     (nil))

(jump_insn 406 405 413 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 409)
            (pc))) speller.c:185 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 409)

;; Successors:  40 39 (fallthru)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 39 , prev 38, next 40, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  38 (fallthru)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []

(note 413 406 407 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(call_insn 407 413 408 39 (call (mem:QI (symbol_ref:SI ("__stack_chk_fail") [flags 0x41]  <function_decl 0xb6a0ed80 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) speller.c:185 618 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))

;; Successors: 
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]


(barrier 408 407 409)


;; Basic block 40 , prev 39, next 1, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

(code_label 409 408 414 40 25 "" [1 uses])

(note 414 409 410 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 410 414 0 40 (use (reg/i:SI 0 ax)) speller.c:185 -1
     (nil))

;; Successors:  EXIT [100.0%]  (fallthru)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Function calculate (calculate, funcdef_no=1, decl_uid=1783, cgraph_uid=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a3 (r91,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a0 (r82,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r81: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a2 (r81,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r80: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a4 (r80,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r79: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a5 (r79,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a1 (r59,l0) best FLOAT_REGS, allocno FLOAT_REGS

  a0(r82,l0) costs: AD_REGS:62 CLOBBERED_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 LEGACY_REGS:62 GENERAL_REGS:62 INT_SSE_REGS:62 FP_TOP_REG:-1 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:62 FLOAT_INT_SSE_REGS:62 ALL_REGS:62 MEM:17
  a1(r59,l0) costs: AD_REGS:85 CLOBBERED_REGS:85 Q_REGS:85 NON_Q_REGS:85 INDEX_REGS:85 LEGACY_REGS:85 GENERAL_REGS:85 INT_SSE_REGS:85 FP_TOP_REG:2 FP_TOP_SSE_REGS:2 FP_SECOND_REG:2 FP_SECOND_SSE_REGS:2 FLOAT_REGS:2 FLOAT_SSE_REGS:2 FLOAT_INT_REGS:85 FLOAT_INT_SSE_REGS:85 ALL_REGS:85 MEM:25
  a2(r81,l0) costs: CLOBBERED_REGS:72 Q_REGS:72 NON_Q_REGS:72 INDEX_REGS:72 LEGACY_REGS:72 GENERAL_REGS:72 INT_SSE_REGS:72 FP_TOP_REG:2 FP_TOP_SSE_REGS:2 FP_SECOND_REG:2 FP_SECOND_SSE_REGS:2 FLOAT_REGS:2 FLOAT_SSE_REGS:2 FLOAT_INT_REGS:72 FLOAT_INT_SSE_REGS:72 ALL_REGS:72 MEM:22
  a3(r91,l0) costs: CLOBBERED_REGS:47 Q_REGS:47 NON_Q_REGS:47 INDEX_REGS:47 LEGACY_REGS:47 GENERAL_REGS:47 INT_SSE_REGS:47 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a4(r80,l0) costs: CLOBBERED_REGS:70 Q_REGS:70 NON_Q_REGS:70 INDEX_REGS:70 LEGACY_REGS:70 GENERAL_REGS:70 INT_SSE_REGS:70 FP_TOP_REG:0 FP_TOP_SSE_REGS:0 FP_SECOND_REG:0 FP_SECOND_SSE_REGS:0 FLOAT_REGS:0 FLOAT_SSE_REGS:0 FLOAT_INT_REGS:70 FLOAT_INT_SSE_REGS:70 ALL_REGS:70 MEM:20
  a5(r79,l0) costs: AD_REGS:64 CLOBBERED_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 LEGACY_REGS:64 GENERAL_REGS:64 INT_SSE_REGS:64 FP_TOP_REG:2 FP_TOP_SSE_REGS:2 FP_SECOND_REG:2 FP_SECOND_SSE_REGS:2 FLOAT_REGS:2 FLOAT_SSE_REGS:2 FLOAT_INT_REGS:64 FLOAT_INT_SSE_REGS:64 ALL_REGS:64 MEM:19
  a6(r78,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 CLOBBERED_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 LEGACY_REGS:2 GENERAL_REGS:2 INT_SSE_REGS:2 FLOAT_INT_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:9
  a7(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a8(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a10(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a11(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a14(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a16(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a19(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a21(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a22(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a23(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a26(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a28(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a31(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 INT_SSE_REGS:0 FLOAT_INT_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 58(l0): point = 0
   Insn 55(l0): point = 2
   Insn 51(l0): point = 4
   Insn 48(l0): point = 7
   Insn 47(l0): point = 9
   Insn 46(l0): point = 11
   Insn 45(l0): point = 13
   Insn 63(l0): point = 15
   Insn 43(l0): point = 17
   Insn 42(l0): point = 19
   Insn 41(l0): point = 21
   Insn 40(l0): point = 23
   Insn 39(l0): point = 25
   Insn 38(l0): point = 27
   Insn 37(l0): point = 29
   Insn 36(l0): point = 31
   Insn 35(l0): point = 33
   Insn 34(l0): point = 35
   Insn 33(l0): point = 37
   Insn 32(l0): point = 39
   Insn 31(l0): point = 41
   Insn 30(l0): point = 43
   Insn 29(l0): point = 45
   Insn 28(l0): point = 47
   Insn 27(l0): point = 49
   Insn 26(l0): point = 51
   Insn 25(l0): point = 53
   Insn 24(l0): point = 55
   Insn 23(l0): point = 57
   Insn 22(l0): point = 59
   Insn 21(l0): point = 61
   Insn 20(l0): point = 63
   Insn 19(l0): point = 65
   Insn 18(l0): point = 67
   Insn 17(l0): point = 69
   Insn 61(l0): point = 72
   Insn 12(l0): point = 74
   Insn 9(l0): point = 77
   Insn 8(l0): point = 79
   Insn 6(l0): point = 82
   Insn 5(l0): point = 84
 a0(r82): [3..4]
 a1(r59): [72..74] [5..7]
 a2(r81): [8..9]
 a3(r91): [10..11]
 a4(r80): [10..13]
 a5(r79): [14..15]
 a6(r78): [16..17]
 a7(r77): [18..19]
 a8(r68): [18..45]
 a9(r76): [20..21]
 a10(r72): [20..33]
 a11(r75): [22..23]
 a12(r74): [22..27]
 a13(r90): [24..25]
 a14(r73): [28..29]
 a15(r89): [30..31]
 a16(r71): [34..35]
 a17(r70): [34..39]
 a18(r88): [36..37]
 a19(r69): [40..41]
 a20(r87): [42..43]
 a21(r67): [46..47]
 a22(r63): [46..59]
 a23(r66): [48..49]
 a24(r65): [48..53]
 a25(r86): [50..51]
 a26(r64): [54..55]
 a27(r85): [56..57]
 a28(r62): [60..61]
 a29(r61): [60..65]
 a30(r84): [62..63]
 a31(r60): [66..67]
 a32(r83): [68..69]
Compressing live ranges: from 87 to 52 - 59%
Ranges after the compression:
 a0(r82): [0..1]
 a1(r59): [50..51] [2..3]
 a2(r81): [4..5]
 a3(r91): [6..7]
 a4(r80): [6..7]
 a5(r79): [8..9]
 a6(r78): [10..11]
 a7(r77): [12..13]
 a8(r68): [12..31]
 a9(r76): [14..15]
 a10(r72): [14..23]
 a11(r75): [16..17]
 a12(r74): [16..19]
 a13(r90): [18..19]
 a14(r73): [20..21]
 a15(r89): [22..23]
 a16(r71): [24..25]
 a17(r70): [24..27]
 a18(r88): [26..27]
 a19(r69): [28..29]
 a20(r87): [30..31]
 a21(r67): [32..33]
 a22(r63): [32..41]
 a23(r66): [34..35]
 a24(r65): [34..37]
 a25(r86): [36..37]
 a26(r64): [38..39]
 a27(r85): [40..41]
 a28(r62): [42..43]
 a29(r61): [42..45]
 a30(r84): [44..45]
 a31(r60): [46..47]
 a32(r83): [48..49]
  regions=1, blocks=7, points=52
    allocnos=33 (big 0), copies=0, conflicts=0, ranges=34
Disposition:
    1:r59  l0     8   31:r60  l0     0   29:r61  l0     1   28:r62  l0     0
   22:r63  l0     2   26:r64  l0     0   24:r65  l0     1   23:r66  l0     0
   21:r67  l0     0    8:r68  l0     2   19:r69  l0     0   17:r70  l0     1
   16:r71  l0     0   10:r72  l0     3   14:r73  l0     0   12:r74  l0     1
   11:r75  l0     0    9:r76  l0     0    7:r77  l0     0    6:r78  l0     0
    5:r79  l0     8    4:r80  l0     9    2:r81  l0     8    0:r82  l0     8
   32:r83  l0     0   30:r84  l0     0   27:r85  l0     0   25:r86  l0     0
   20:r87  l0     0   18:r88  l0     0   15:r89  l0     0   13:r90  l0     0
    3:r91  l0     8
+++Costs: overall 7, reg 7, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


calculate

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 8[st] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r6={1d,6u} r7={1d,6u} r8={1d,2u} r16={1d,15u} r17={13d,2u} r20={1d,8u} r59={2d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 127{55d,72u,0e} in 41{41 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)


;; Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  ENTRY (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (reg/f:SI 16 argp) [0 b+0 S4 A32])
            (const_int 0 [0]))) speller.c:195 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 10)
            (pc))) speller.c:195 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 10)

;; Successors:  4 3 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  2 (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 a+0 S4 A32])
            (const_int 0 [0]))) speller.c:195 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) speller.c:195 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 15)

;; Successors:  4 (fallthru) 5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]



;; Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  2 3 (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

(code_label 10 9 11 4 27 "" [1 uses])

(note 11 10 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 61 4 (set (reg:DF 59 [ D.1823 ])
        (mem/u/c:DF (symbol_ref/u:SI ("*.LC1") [flags 0x2]) [0 S8 A64])) speller.c:196 109 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))

(jump_insn 61 12 62 4 (set (pc)
        (label_ref 49)) speller.c:196 611 {jump}
     (nil)
 -> 49)

;; Successors:  6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


(barrier 62 61 15)


;; Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 83 84 85 86 87 88 89 90 91

(code_label 15 62 16 5 28 "" [1 uses])

(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 5 (set (reg/f:SI 83)
        (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 a+0 S4 A32])) speller.c:198 64 {*movsi_internal}
     (nil))

(insn 18 17 19 5 (set (reg:SI 60 [ D.1824 ])
        (mem/j:SI (reg/f:SI 83) [0 a_3(D)->ru_utime.tv_sec+0 S4 A32])) speller.c:198 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 83)
        (nil)))

(insn 19 18 20 5 (parallel [
            (set (reg:SI 61 [ D.1825 ])
                (mult:SI (reg:SI 60 [ D.1824 ])
                    (const_int 1000000 [0xf4240])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:198 328 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 60 [ D.1824 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 20 19 21 5 (set (reg/f:SI 84)
        (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 a+0 S4 A32])) speller.c:198 64 {*movsi_internal}
     (nil))

(insn 21 20 22 5 (set (reg:SI 62 [ D.1826 ])
        (mem/j:SI (plus:SI (reg/f:SI 84)
                (const_int 4 [0x4])) [0 a_3(D)->ru_utime.tv_usec+0 S4 A32])) speller.c:198 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 84)
        (nil)))

(insn 22 21 23 5 (parallel [
            (set (reg:SI 63 [ D.1827 ])
                (plus:SI (reg:SI 61 [ D.1825 ])
                    (reg:SI 62 [ D.1826 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:198 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 62 [ D.1826 ])
        (expr_list:REG_DEAD (reg:SI 61 [ D.1825 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 23 22 24 5 (set (reg/f:SI 85)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 b+0 S4 A32])) speller.c:199 64 {*movsi_internal}
     (nil))

(insn 24 23 25 5 (set (reg:SI 64 [ D.1828 ])
        (mem/j:SI (reg/f:SI 85) [0 b_2(D)->ru_utime.tv_sec+0 S4 A32])) speller.c:199 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 85)
        (nil)))

(insn 25 24 26 5 (parallel [
            (set (reg:SI 65 [ D.1829 ])
                (mult:SI (reg:SI 64 [ D.1828 ])
                    (const_int -1000000 [0xfffffffffff0bdc0])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:199 328 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 64 [ D.1828 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 26 25 27 5 (set (reg/f:SI 86)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 b+0 S4 A32])) speller.c:199 64 {*movsi_internal}
     (nil))

(insn 27 26 28 5 (set (reg:SI 66 [ D.1830 ])
        (mem/j:SI (plus:SI (reg/f:SI 86)
                (const_int 4 [0x4])) [0 b_2(D)->ru_utime.tv_usec+0 S4 A32])) speller.c:199 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 86)
        (nil)))

(insn 28 27 29 5 (parallel [
            (set (reg:SI 67 [ D.1831 ])
                (minus:SI (reg:SI 65 [ D.1829 ])
                    (reg:SI 66 [ D.1830 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:199 286 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 66 [ D.1830 ])
        (expr_list:REG_DEAD (reg:SI 65 [ D.1829 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 29 28 30 5 (parallel [
            (set (reg:SI 68 [ D.1832 ])
                (plus:SI (reg:SI 63 [ D.1827 ])
                    (reg:SI 67 [ D.1831 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:198 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 67 [ D.1831 ])
        (expr_list:REG_DEAD (reg:SI 63 [ D.1827 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 30 29 31 5 (set (reg/f:SI 87)
        (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 a+0 S4 A32])) speller.c:200 64 {*movsi_internal}
     (nil))

(insn 31 30 32 5 (set (reg:SI 69 [ D.1833 ])
        (mem/j:SI (plus:SI (reg/f:SI 87)
                (const_int 8 [0x8])) [0 a_3(D)->ru_stime.tv_sec+0 S4 A32])) speller.c:200 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87)
        (nil)))

(insn 32 31 33 5 (parallel [
            (set (reg:SI 70 [ D.1834 ])
                (mult:SI (reg:SI 69 [ D.1833 ])
                    (const_int 1000000 [0xf4240])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:200 328 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 69 [ D.1833 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 33 32 34 5 (set (reg/f:SI 88)
        (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 a+0 S4 A32])) speller.c:200 64 {*movsi_internal}
     (nil))

(insn 34 33 35 5 (set (reg:SI 71 [ D.1835 ])
        (mem/j:SI (plus:SI (reg/f:SI 88)
                (const_int 12 [0xc])) [0 a_3(D)->ru_stime.tv_usec+0 S4 A32])) speller.c:200 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 88)
        (nil)))

(insn 35 34 36 5 (parallel [
            (set (reg:SI 72 [ D.1836 ])
                (plus:SI (reg:SI 70 [ D.1834 ])
                    (reg:SI 71 [ D.1835 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:200 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 71 [ D.1835 ])
        (expr_list:REG_DEAD (reg:SI 70 [ D.1834 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 36 35 37 5 (set (reg/f:SI 89)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 b+0 S4 A32])) speller.c:201 64 {*movsi_internal}
     (nil))

(insn 37 36 38 5 (set (reg:SI 73 [ D.1837 ])
        (mem/j:SI (plus:SI (reg/f:SI 89)
                (const_int 8 [0x8])) [0 b_2(D)->ru_stime.tv_sec+0 S4 A32])) speller.c:201 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 89)
        (nil)))

(insn 38 37 39 5 (parallel [
            (set (reg:SI 74 [ D.1838 ])
                (mult:SI (reg:SI 73 [ D.1837 ])
                    (const_int -1000000 [0xfffffffffff0bdc0])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:201 328 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 73 [ D.1837 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 39 38 40 5 (set (reg/f:SI 90)
        (mem/f/c:SI (reg/f:SI 16 argp) [0 b+0 S4 A32])) speller.c:201 64 {*movsi_internal}
     (nil))

(insn 40 39 41 5 (set (reg:SI 75 [ D.1839 ])
        (mem/j:SI (plus:SI (reg/f:SI 90)
                (const_int 12 [0xc])) [0 b_2(D)->ru_stime.tv_usec+0 S4 A32])) speller.c:201 64 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 90)
        (nil)))

(insn 41 40 42 5 (parallel [
            (set (reg:SI 76 [ D.1840 ])
                (minus:SI (reg:SI 74 [ D.1838 ])
                    (reg:SI 75 [ D.1839 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:201 286 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 75 [ D.1839 ])
        (expr_list:REG_DEAD (reg:SI 74 [ D.1838 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 42 41 43 5 (parallel [
            (set (reg:SI 77 [ D.1841 ])
                (plus:SI (reg:SI 72 [ D.1836 ])
                    (reg:SI 76 [ D.1840 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:200 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 76 [ D.1840 ])
        (expr_list:REG_DEAD (reg:SI 72 [ D.1836 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 43 42 63 5 (parallel [
            (set (reg:SI 78 [ D.1842 ])
                (plus:SI (reg:SI 68 [ D.1832 ])
                    (reg:SI 77 [ D.1841 ])))
            (clobber (reg:CC 17 flags))
        ]) speller.c:199 250 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 77 [ D.1841 ])
        (expr_list:REG_DEAD (reg:SI 68 [ D.1832 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 63 43 45 5 (parallel [
            (set (reg:DF 79 [ D.1843 ])
                (float:DF (reg:SI 78 [ D.1842 ])))
            (clobber (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 S4 A32]))
        ]) speller.c:198 226 {*floatsidf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 78 [ D.1842 ])
        (nil)))

(insn 45 63 46 5 (set (reg:XF 80 [ D.1844 ])
        (float_extend:XF (reg:DF 79 [ D.1843 ]))) speller.c:198 139 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 79 [ D.1843 ])
        (nil)))

(insn 46 45 47 5 (set (reg:XF 91)
        (mem/u/c:XF (symbol_ref/u:SI ("*.LC18") [flags 0x2]) [0 S12 A128])) speller.c:198 107 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+6 [0x0.f424p+20])
        (nil)))

(insn 47 46 48 5 (set (reg:XF 81 [ D.1845 ])
        (div:XF (reg:XF 80 [ D.1844 ])
            (reg:XF 91))) speller.c:198 773 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 91)
        (expr_list:REG_DEAD (reg:XF 80 [ D.1844 ])
            (nil))))

(insn 48 47 49 5 (parallel [
            (set (reg:DF 59 [ D.1823 ])
                (float_truncate:DF (reg:XF 81 [ D.1845 ])))
            (clobber (mem/c:DF (plus:SI (reg/f:SI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 S8 A64]))
        ]) speller.c:198 147 {*truncxfdf2_mixed}
     (expr_list:REG_DEAD (reg:XF 81 [ D.1845 ])
        (nil)))

;; Successors:  6 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59



;; Basic block 6 , prev 5, next 1, loop_depth 0, count 0, freq 0, maybe hot, flags: new reachable rtl modified.
;; Predecessors:  5 (fallthru) 4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 8 [st] 82

(code_label 49 48 50 6 29 "" [1 uses])

(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 55 6 (set (reg:DF 82 [ <retval> ])
        (reg:DF 59 [ D.1823 ])) 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 59 [ D.1823 ])
        (nil)))

(insn 55 51 58 6 (set (reg/i:DF 8 st)
        (reg:DF 82 [ <retval> ])) speller.c:203 109 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 82 [ <retval> ])
        (nil)))

(insn 58 55 0 6 (use (reg/i:DF 8 st)) speller.c:203 -1
     (nil))

;; Successors:  EXIT [100.0%]  (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


